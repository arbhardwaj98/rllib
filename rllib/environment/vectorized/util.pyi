from abc import ABCMeta
from typing import Any, Callable, Iterable, Tuple
import types
import numpy as np
import torch.__spec__ as torch_mod
from gym import Env

from rllib.dataset.datatypes import Action, Array, Done, Reward, State

class VectorizedEnv(Env, metaclass=ABCMeta):
    """Vectorized implementation of Acrobot."""

    @property
    def bk(self) -> types.ModuleType: ...
    def atan2(self, sin: Array, cos: Array) -> Array: ...
    def clip(self, val: Array, min_val: float, max_val: float) -> Array: ...
    def cat(self, arrays: Iterable[Array], axis: int = ...) -> Array: ...
    def unsqueeze(self, array: Array, axis: int = ...) -> Array: ...
    def rand(self, min_val: float, max_val: float) -> Array: ...
    def step(self, action: Action) -> Tuple[State, Reward, Done, dict]: ...
    @property
    def state(self) -> State: ...
    @state.setter
    def state(self, value: State) -> None: ...
    def set_state(self, state: State) -> None: ...
    def get_state(self) -> State: ...

def rk4(
    derivs: Callable[..., Array],
    y0: Array,
    t: Iterable[float],
    *args: Any,
    **kwargs: Any,
) -> Array: ...
